I need to get my playbook to do the following:

# == Step 0 - Install personal tools
# Developer comfort

sudo apt-get install tmux emacs

# == Step 1 - Install Docker
# https://docs.docker.com/engine/install/ubuntu/

sudo apt-get update

sudo apt-get install \
    ca-certificates \
    curl \
    gnupg \
    lsb-release

sudo mkdir -p /etc/apt/keyrings

curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg

echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
  $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

sudo apt-get update

sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin

# At this point containerd is installed, but you need to configure it since
# the configuration supplied by the package won’t work with Kubernetes

containerd config default > config.toml
sudo mv config.toml /etc/containerd/config.toml

# Restart to pick up the config
sudo systemctl restart containerd

# This will get me the docker runtime
# This should occur on all nodes.

# == Step 2 - Install Kubernetes (we're installing kubelet and kubeadm)

curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -

echo "deb http://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list

sudo apt-get update
sudo apt-get upgrade
sudo apt-get install -y kubelet kubeadm kubectl kubernetes-cni

echo "net.bridge.bridge-nf-call-iptables=1" | sudo tee -a /etc/sysctl.conf
sudo sysctl -p

# == Step 3 - Server node hostname

sudo hostnamectl set-hostname "appropriate node name goes here"

# == Step 4 - Setting up server node

https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm-init/
https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/

# Reports that this... --apiserver-cert-extra-sans kubernetes.cluster.home
# ... is optional. It's the API server serving certificate subject alternative name

# --apiserver-advertise-address string
# The IP address the API Server will advertise it's listening on. If not set the default network interface will be used.

# --pod-network-cidr string
Specify range of IP addresses for the pod network. If set, the control plane will automatically allocate CIDRs for every node.

sudo kubeadm init --pod-network-cidr=192.168.0.0/16 --apiserver-advertise-address=10.245.160.87

# == References
# https://www.howtoforge.com/setup-a-kubernetes-cluster-on-aws-ec2-instance-ubuntu-using-kubeadm/amp/
# https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm-init/
# https://medium.com/andcloudio/creating-kubernetes-cluster-using-kubeadm-13b6f95b4fb9
